{"ast":null,"code":"var R = require('ramda');\n\nvar path = require('path');\n\nvar lutils = require('loader-utils');\n\nvar svgToReact = require('./index');\n\nvar titleCase = require('./util/title-case');\n\nfunction titleCaseBasename(filepath, delim) {\n  var ext = path.extname(filepath);\n  var base = path.basename(filepath, ext);\n  return titleCase(delim)(base);\n}\n\nfunction mapKeyValue(acc, cur) {\n  var keyValue = cur.split(':');\n  acc[keyValue[0]] = keyValue[1];\n  return acc;\n}\n\nmodule.exports = function svgReactLoader(source) {\n  var context = this;\n  var callback = context.async();\n  var ctxOpts = context.svgReactLoader;\n  var filters = ctxOpts && ctxOpts.filters || [];\n  var query = lutils.getOptions(context);\n  var rsrcQuery = context.resourceQuery && lutils.parseQuery(context.resourceQuery);\n  var params = R.merge(query || {}, rsrcQuery || {});\n  var titleCaseDelim = params.titleCaseDelim || /[._-]/;\n  var displayName = params.name || titleCaseBasename(context.resourcePath, titleCaseDelim);\n  var tagname = params.tag;\n  var tagprops = params.props || params.attrs;\n  var propsMap = params.propsMap || {};\n  var raw = params.raw;\n  var xmlnsTest = params.xmlnsTest;\n  var classIdPrefix = params.classIdPrefix || false;\n  context.cacheable();\n  var options = {\n    displayName: displayName\n  };\n\n  if (typeof raw !== 'undefined') {\n    options.raw = raw;\n  }\n\n  if (typeof xmlnsTest === 'string') {\n    options.xmlnsTest = new RegExp(xmlnsTest);\n  }\n\n  if (Array.isArray(tagprops)) {\n    tagprops = tagprops.reduce(mapKeyValue, {});\n  }\n\n  if (tagname || tagprops) {\n    options.root = {};\n\n    if (tagname) {\n      options.root.tagname = tagname;\n    }\n\n    if (tagprops) {\n      options.root.props = tagprops;\n    }\n  }\n\n  options.propsMap = Array.isArray(propsMap) ? propsMap.reduce(mapKeyValue, {}) : propsMap;\n  options.classIdPrefix = classIdPrefix === true ? displayName + '__' : typeof classIdPref === 'string' ? lutils.interpolatename(context, classIdPrefix) : classIdPrefix;\n\n  if (params.filters) {\n    filters = filters.concat(params.filters.map(function (name) {\n      return typeof name === 'function' ? name : require(context.resolveSync(context.context, name));\n    }));\n  }\n\n  options.filters = filters;\n  svgToReact(options, source).subscribe(function (result) {\n    callback(null, result);\n  }, callback);\n};","map":null,"metadata":{},"sourceType":"script"}