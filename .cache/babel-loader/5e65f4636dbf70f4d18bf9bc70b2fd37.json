{"ast":null,"code":"/**\n * Module dependencies.\n */\nvar Base = require('./compiler');\n\nvar inherits = require('inherits');\n/**\n * Expose compiler.\n */\n\n\nmodule.exports = Compiler;\n/**\n * Initialize a new `Compiler`.\n */\n\nfunction Compiler(options) {\n  Base.call(this, options);\n}\n/**\n * Inherit from `Base.prototype`.\n */\n\n\ninherits(Compiler, Base);\n/**\n * Compile `node`.\n */\n\nCompiler.prototype.compile = function (node) {\n  return node.stylesheet.rules.map(this.visit, this).join('');\n};\n/**\n * Visit comment node.\n */\n\n\nCompiler.prototype.comment = function (node) {\n  return this.emit('', node.position);\n};\n/**\n * Visit import node.\n */\n\n\nCompiler.prototype.import = function (node) {\n  return this.emit('@import ' + node.import + ';', node.position);\n};\n/**\n * Visit media node.\n */\n\n\nCompiler.prototype.media = function (node) {\n  return this.emit('@media ' + node.media, node.position) + this.emit('{') + this.mapVisit(node.rules) + this.emit('}');\n};\n/**\n * Visit document node.\n */\n\n\nCompiler.prototype.document = function (node) {\n  var doc = '@' + (node.vendor || '') + 'document ' + node.document;\n  return this.emit(doc, node.position) + this.emit('{') + this.mapVisit(node.rules) + this.emit('}');\n};\n/**\n * Visit charset node.\n */\n\n\nCompiler.prototype.charset = function (node) {\n  return this.emit('@charset ' + node.charset + ';', node.position);\n};\n/**\n * Visit namespace node.\n */\n\n\nCompiler.prototype.namespace = function (node) {\n  return this.emit('@namespace ' + node.namespace + ';', node.position);\n};\n/**\n * Visit supports node.\n */\n\n\nCompiler.prototype.supports = function (node) {\n  return this.emit('@supports ' + node.supports, node.position) + this.emit('{') + this.mapVisit(node.rules) + this.emit('}');\n};\n/**\n * Visit keyframes node.\n */\n\n\nCompiler.prototype.keyframes = function (node) {\n  return this.emit('@' + (node.vendor || '') + 'keyframes ' + node.name, node.position) + this.emit('{') + this.mapVisit(node.keyframes) + this.emit('}');\n};\n/**\n * Visit keyframe node.\n */\n\n\nCompiler.prototype.keyframe = function (node) {\n  var decls = node.declarations;\n  return this.emit(node.values.join(','), node.position) + this.emit('{') + this.mapVisit(decls) + this.emit('}');\n};\n/**\n * Visit page node.\n */\n\n\nCompiler.prototype.page = function (node) {\n  var sel = node.selectors.length ? node.selectors.join(', ') : '';\n  return this.emit('@page ' + sel, node.position) + this.emit('{') + this.mapVisit(node.declarations) + this.emit('}');\n};\n/**\n * Visit font-face node.\n */\n\n\nCompiler.prototype['font-face'] = function (node) {\n  return this.emit('@font-face', node.position) + this.emit('{') + this.mapVisit(node.declarations) + this.emit('}');\n};\n/**\n * Visit host node.\n */\n\n\nCompiler.prototype.host = function (node) {\n  return this.emit('@host', node.position) + this.emit('{') + this.mapVisit(node.rules) + this.emit('}');\n};\n/**\n * Visit custom-media node.\n */\n\n\nCompiler.prototype['custom-media'] = function (node) {\n  return this.emit('@custom-media ' + node.name + ' ' + node.media + ';', node.position);\n};\n/**\n * Visit rule node.\n */\n\n\nCompiler.prototype.rule = function (node) {\n  var decls = node.declarations;\n  if (!decls.length) return '';\n  return this.emit(node.selectors.join(','), node.position) + this.emit('{') + this.mapVisit(decls) + this.emit('}');\n};\n/**\n * Visit declaration node.\n */\n\n\nCompiler.prototype.declaration = function (node) {\n  return this.emit(node.property + ':' + node.value, node.position) + this.emit(';');\n};","map":null,"metadata":{},"sourceType":"script"}