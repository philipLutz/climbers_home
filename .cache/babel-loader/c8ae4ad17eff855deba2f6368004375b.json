{"ast":null,"code":"import request from 'superagent';\nvar CALENDAR_ID = '51dtqg3dukqtjp0i3delels808@group.calendar.google.com';\nvar API_KEY = 'AIzaSyCgxW4AJshjdlRe4DE0i50_ehoSnff0Xcc';\nvar url = \"https://www.googleapis.com/calendar/v3/calendars/\".concat(CALENDAR_ID, \"/events?key=\").concat(API_KEY);\nexport function getEvents(callback) {\n  request.get(url).end(function (err, resp) {\n    if (!err) {\n      var events = [];\n      JSON.parse(resp.text).items.map(function (event) {\n        events.push({\n          start: event.start.date || event.start.dateTime,\n          end: event.end.date || event.end.dateTime,\n          title: event.summary\n        });\n      });\n      callback(events);\n    }\n  });\n}","map":{"version":3,"sources":["/Users/philipandrewlutz/climbers_home/react-climbers-home/src/components/calendar/getEvents.js"],"names":["request","CALENDAR_ID","API_KEY","url","getEvents","callback","get","end","err","resp","events","JSON","parse","text","items","map","event","push","start","date","dateTime","title","summary"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,YAApB;AAEA,IAAMC,WAAW,GAAG,sDAApB;AACA,IAAMC,OAAO,GAAG,yCAAhB;AACA,IAAIC,GAAG,8DAAuDF,WAAvD,yBAAiFC,OAAjF,CAAP;AAEA,OAAO,SAASE,SAAT,CAAoBC,QAApB,EAA8B;AACnCL,EAAAA,OAAO,CACJM,GADH,CACOH,GADP,EAEGI,GAFH,CAEO,UAACC,GAAD,EAAMC,IAAN,EAAe;AAClB,QAAI,CAACD,GAAL,EAAU;AACR,UAAME,MAAM,GAAG,EAAf;AACAC,MAAAA,IAAI,CAACC,KAAL,CAAWH,IAAI,CAACI,IAAhB,EAAsBC,KAAtB,CAA4BC,GAA5B,CAAgC,UAACC,KAAD,EAAW;AACzCN,QAAAA,MAAM,CAACO,IAAP,CAAY;AACVC,UAAAA,KAAK,EAAEF,KAAK,CAACE,KAAN,CAAYC,IAAZ,IAAoBH,KAAK,CAACE,KAAN,CAAYE,QAD7B;AAEVb,UAAAA,GAAG,EAAES,KAAK,CAACT,GAAN,CAAUY,IAAV,IAAkBH,KAAK,CAACT,GAAN,CAAUa,QAFvB;AAGVC,UAAAA,KAAK,EAAEL,KAAK,CAACM;AAHH,SAAZ;AAKD,OAND;AAOAjB,MAAAA,QAAQ,CAACK,MAAD,CAAR;AACD;AACF,GAdH;AAeD","sourcesContent":["import request from 'superagent'\n\nconst CALENDAR_ID = '51dtqg3dukqtjp0i3delels808@group.calendar.google.com';\nconst API_KEY = 'AIzaSyCgxW4AJshjdlRe4DE0i50_ehoSnff0Xcc'\nlet url = `https://www.googleapis.com/calendar/v3/calendars/${CALENDAR_ID}/events?key=${API_KEY}`\n\nexport function getEvents (callback) {\n  request\n    .get(url)\n    .end((err, resp) => {\n      if (!err) {\n        const events = []\n        JSON.parse(resp.text).items.map((event) => {\n          events.push({\n            start: event.start.date || event.start.dateTime,\n            end: event.end.date || event.end.dateTime,\n            title: event.summary,\n          })\n        })\n        callback(events)\n      }\n    })\n}"]},"metadata":{},"sourceType":"module"}