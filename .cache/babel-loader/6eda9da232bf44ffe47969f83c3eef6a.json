{"ast":null,"code":"var R = require('ramda');\n\nvar DEFAULTS = {\n  displayName: 'SvgReactComponent',\n  filters: [],\n  propsMap: {\n    'class': 'className',\n    'for': 'htmlFor'\n  },\n  classIdPrefix: false,\n  raw: false,\n  xmlnsTest: /^xmlns(Xlink)?$/\n};\n\nmodule.exports = function (opts) {\n  var filters = [];\n\n  if (opts && opts.propsMap) {\n    opts.propsMap = R.merge(DEFAULTS.propsMap, opts.propsMap);\n  }\n\n  var options = R.merge(DEFAULTS, opts || {});\n  filters.push(require('./sanitize/filters/text-content')(null), require('./sanitize/filters/normalize-node')(null), require('./sanitize/filters/convert-style-prop')(null), require('./sanitize/filters/prop-mapper')(options.propsMap), require('./sanitize/filters/camel-case-props')(null), require('./sanitize/filters/remove-xmlns-props')(options.xmlnsTest));\n\n  if (options.classIdPrefix) {\n    filters.push(require('./sanitize/filters/prefix-style-class-id')({\n      prefix: options.classIdPrefix\n    }));\n  }\n\n  if (options.root) {\n    filters.push(require('./sanitize/filters/custom-root')(options.root));\n  }\n\n  options.filters = filters.concat(options.filters);\n  return options;\n};","map":null,"metadata":{},"sourceType":"script"}